else if (x == "中集")
return("ZhongJi")
}
tmp <- my.df %>% mutate(fun.convert(vsl_company))
tmp <- my.df %>% mutate(vsl_company = fun.convert(vsl_company))
my.df <- xinfeng_alf_cleaned_eng
tmp <- my.df %>% mutate(vsl_company = fun.convert(vsl_company))
View(tmp)
?spply
?sapply
## Testing area
p <- ggplot(my.df, aes(x = ship_time, y = actual_cost, group = p, color = p)) + geom_line()
tmp <- sapply(my.df$vsl_company, FUN = fun.convert)
TMP
tmp
df.clean$vsl_company <- sapply(my.df$vsl_company, FUN = fun.convert)
View(df.clean)
unique(df.clean$vsl_company)
str(df.clean)
df.clean$vsl_company <- as.factor(sapply(my.df$vsl_company, FUN = fun.convert))
View(df.clean)
str(df.clean)
# Add column "vsl_name"
vsl_name_list <- unique(my.df$vsl_name)
vsl_name_list
which("杰泰8" %in% vsl_name_list)
which("大舟祥" %in% vsl_name_list)
which(vsl_name_list %in%  "大舟祥")
# Add column "vsl_name"
vsl_name_list <- unique(my.df$vsl_name)
fun.convert <- function(x){hich(vsl_name_list %in%  x)}
df.clean$vsl_name <- as.factor(sapply(my.df$vsl_name, FUN = fun.convert))
# Add column "vsl_name"
vsl_name_list <- unique(my.df$vsl_name)
fun.convert <- function(x){which(vsl_name_list %in%  x)}
df.clean$vsl_name <- as.factor(sapply(my.df$vsl_name, FUN = fun.convert))
View(df.clean)
# Write it into csv for future reference
to.write.df <- data.frame(vsl_name_list, 1:length(vsl_name_list))
View(to.write.df)
?write.ccv
?write.csv
write.csv(to.write.df, file = "tmp.csv", sep = ",")
write.csv(to.write.df, file = "tmp.csv")
write.csv(to.write.df, file = "tmp.csv", fileEncoding = "UTF-8")
unique(my.df$vsl_type)
# Add column "vsl_type"
df.clean$vsl_type <- as.factor(my.df$vsl_type)
unique(my.df$customer)
## Testing area
p <- ggplot(my.df, aes(x = ship_time, y = actual_cost, group = p, color = p)) + geom_line()
str(total_weight)
str(my.df)
# Note: the column "customer" is removed
# Add column "total_weight"
df.clean$total_weight <- my.df$total_weight
unique(my.df$cargo_type)
unique(my.df$start_port)
unique(my.df$p)
### Add column "port"
# Write the port names into csv for future reference
write.csv(df.clean$p, file = "tmp.csv", fileEncoding = "UTF-8")
### Add column "port"
# Write the port names into csv for future reference
write.csv(data.frame(my.df$p), file = "tmp.csv", fileEncoding = "UTF-8")
### Add column "port"
# Write the port names into csv for future reference
port_list <- unique(my.df$p)
write.csv(port_list, file = "tmp.csv", fileEncoding = "UTF-8")
### Add column "port"
# Write the port names into csv for future reference
port_list <- unique(my.df$p)
write.csv(data.frame(port_list), file = "tmp.csv", fileEncoding = "UTF-8")
port_list
# Then add the column
fun.convert <- function(x){
if (x == "宁波宝达") {return("NingBoBaoDa")}
else if (x == "宁波海兆"){return("NingBoHaiZhao")}
else if (x == "宁波华埠"){return("NingBoHuaPu")}
else if (x == "宁波江甬"){return("NingBoJiangYong")}
else if (x == "椒江三山再东"){return("JiaoJiangSSZD")}
else if (x == "宁波镇海"){return("NingBoZhenHai")}
else if (x == "宁波北仑永港"){return("NingBoBLYG")}
else if (x == "宁波大榭"){return("NingBoDaXie")}
else if (x == "象山"){return("XiangShan")}
else if (x == "椒江八达"){return("JiaoJiangBaDa")}
else if (x == "玉环"){return("YuHuan")}
else if (x == "椒江大华"){return("JiaoJiangDaHua")}
else if (x == "椒江再东"){return("JiaoJiangZaiDong")}
else if (x == "椒江三山八达"){return("JiaoJiangSSBD")}
else if (x == "椒江三山大华"){return("JiaoJiangSSDH")}
else if (x == "椒江"){return("JiaoJiang")}
}
df.clean$port <- as.factor(sapply(my.df$p, FUN = fun.convert))
View(df.clean)
### Remove column "port_type" since it is repeat with "port_type_value"
df.clean$port_type_value <- my.df$port_type_value
str(my.df)
str(df.clean)
### Remove column "port_type" since it is repeat with "port_type_value"
df.clean$port_type_value <- as.numeric(my.df$port_type_value)
str(df.clean)
df.clean$port_price_diff <- as.numerica(my.df$port_price_diff)
df.clean$port_price_diff <- as.numeric(my.df$port_price_diff)
### Add columns "port_type_value", "port_price_diff"
df.clean$port_type_value <- as.numeric(my.df$port_type_value)
df.clean$port_price_diff <- as.numeric(my.df$port_price_diff)
df.clean$distance <- as.numeric(my.df$distance)
unique(my.df$customer_quote_time)
### Remove column "customer_quote_time" since only NA values
### Add column "income"
df.clean$income <- as.numeric(my.df$actual_income)
df.clean$cost <- as.numeric(my.df$actual_cost)
unique(my.df$li_huo_cost)
unique(my.df$bang_dian_cost)
unique(my.df$chao_qi_cost)
unique(my.df$kau_gang_cost)
unique(my.df$same_time_competition)
unique(my.df$other_factor)
colnames(my.df)
df.clean <- cbind(df.clean, my.df %>% select(22:24))
str(df.clean)
colnames(df.clean)
for (i in 15:17){df.clean[is.na(df.clean[,i]),i] = 0}
colnames(df.clean)[17] = "kua_gang_cost"
str(df.clean)
?save
### Remove columns "same_time_competition" since they are all NAs.
### Remove columns "other_factor" since they are all NAs
save("clean_data_nov172018.RData", list = c("df.clean"))
### Remove columns "same_time_competition" since they are all NAs.
### Remove columns "other_factor" since they are all NAs
save(file = "clean_data_nov172018.RData", list = c("df.clean"))
setwd("/Users/hengzhang/Dropbox/My Projects/Xinfeng Private/TrawindShippingCostForecast")
load("clean_data_nov172018.RData")
remove(list = ls())
setwd("/Users/hengzhang/Dropbox/My Projects/Xinfeng Private/TrawindShippingCostForecast")
load("clean_data_nov172018.RData")
View(df.clean)
View(df.clean)
#
tmp <- df.clean %>% group_by(port) %>% summarise(length(vsl_name))
tmp
#
tmp <- df.clean %>% group_by(port) %>% summarise(length(vsl_name)) %>% sort(length(vsl_name))
#
tmp <- df.clean %>% group_by(port) %>% summarise(count_ = length(vsl_name)) %>% sort(count_)
#
tmp <- df.clean %>% group_by(port) %>% summarise(count_ = length(vsl_name)) %>% arrange(count_)
tmp
#
tmp <- df.clean %>% group_by(port) %>% summarise(count_ = length(vsl_name)) %>%
arrange(count_, "descend")
#
tmp <- df.clean %>% group_by(port) %>% summarise(count_ = length(vsl_name)) %>%
arrange(count_, "descend")
?arrange
#
tmp <- df.clean %>% group_by(port) %>% summarise(count_ = length(vsl_name)) %>%
arrange(desc(count_))
tmp
top_port <- c("NingBoHaiZhao", "NingBoZhenHai", "NingBoJiangYong", "JiaoJiangSSZD")
# Truncate and plot
df.truncated <- df.clean %>% filter(port %in% top_port)
library(ggplot2)
p <- ggplot(df.truncated, aes(x = ship_time, y = cost, group = port)) + geom_line()
p
p <- ggplot(df.truncated, aes(x = ship_time, y = cost, group = port, color = port)) + geom_line()
p
p <- ggplot(df.truncated, aes(x = ship_time, y = cost, group = port,
color = port)) + geom_line() + geom_point()
p
# Get the bid times
bid_times <- unique(df.truncated$bid_time)
bid_times
p <- p + geom_vline(xintercept = bid_times[1])
p
p <- ggplot(df.truncated, aes(x = ship_time, y = cost, group = port,
color = port)) + geom_line() + geom_point()
for (i in length(bid_times)){
p <- p + geom_vline(xintercept = bid_times[i])
}
p
p <- ggplot(df.truncated, aes(x = ship_time, y = cost, group = port,
color = port)) + geom_line() + geom_point()
p <- p + geom_vline(xintercept = bid_times)
p
p <- ggplot(df.truncated, aes(x = ship_time, y = cost, group = port,
color = port)) + geom_line() + geom_point()
p <- p + geom_vline(xintercept = bid_times, colour="green", linetype = "longdash")
p
p <- ggplot(df.truncated, aes(x = ship_time, y = cost, group = port,
color = port)) +
geom_vline(xintercept = bid_times, colour="green", linetype = "longdash") +
geom_line() + geom_point()
p
cor.mat <-corr(df.clean)
?corr
cor.mat <-cor(df.clean)
unique(vsl_company)
unique(df.clean$vsl_company)
p <- ggplot(df.clean, aes(x = ship_time, y = cost, group = vsl_company,
color = vsl_company)) +
geom_vline(xintercept = bid_times, colour="green", linetype = "longdash") +
geom_line() + geom_point()
p
p <- ggplot(df.clean, aes(x = ship_time, y = cost, group = vsl_company,
color = vsl_company)) +
geom_vline(xintercept = bid_times, colour="green", linetype = "longdash") +
geom_point()
p
str(df.clean)
unique(distance)
unique(df.clean$distance)
### Plot by vsl Type
p <- ggplot(df.clean, aes(x = ship_time, y = cost, group = vsl_type,
color = vsl_type)) +
geom_vline(xintercept = bid_times, colour="green", linetype = "longdash") +
geom_point()
p
unique(total_weight)
unique(df.clean$total_weight)
### Plot total_weight vs vsl_type
p <- ggplot(df.clean, aes(x = vsl_typ, y = total_weight)) + geom_boxplot()
p
### Plot total_weight vs vsl_type
p <- ggplot(df.clean, aes(x = vsl_type, y = total_weight)) + geom_boxplot()
p
str(df.clean)
cor(df.clean$cost, df.clean$total_weight)
p <- ggplot(df.clean, aes(x = total_weight, y = cost)) +
geom_vline(xintercept = bid_times, colour="green", linetype = "longdash") +
geom_point() + geom_line
p
p <- ggplot(df.clean, aes(x = total_weight, y = cost)) +
geom_vline(xintercept = bid_times, colour="green", linetype = "longdash") +
geom_point() + geom_line()
p
p <- ggplot(df.clean, aes(x = total_weight, y = cost)) + geom_point() + geom_line()
p
p <- ggplot(df.clean, aes(x = total_weight, y = cost)) + geom_point()
p
View(df.clean)
View(df.clean)
unique(df.clean$vsl_company)
remove(list = ls())
library(ggplot2)
setwd("/Users/hengzhang/Dropbox/My Projects/Xinfeng Private/TrawindShippingCostForecast")
load("clean_data_nov172018.RData")
# Get y
regress.df <- df.clean %>% select(cost)
View(df.clean)
str(df.clean)
as.year(df.clean[1,1])
as.Date(df.clean)
as.Date(df.clean[1.1])
as.Date(df.clean[1,1])
tmp <- as.Date(df.clean[1,1])
year(tmp)
as.year(tmp)
type(tmp)
class(tmp)
tmp2 <- as.numeric(format(tmp,'%Y'))
tmp
class(tmp2)
# Add ship_year and ship_month
df.base$year <- as.numeric(format(as.Date(df.clean$ship_time), %Y))
# Add ship_year and ship_month
df.base$year <- as.numeric(format(as.Date(df.clean$ship_time), '%Y'))
df.base <- df.clean
# Add ship_year and ship_month
df.base$year <- as.numeric(format(as.Date(df.clean$ship_time), '%Y'))
df.base <- df.clean
df.base$ship_month <- as.numeric(format(as.Date(df.clean$ship_time), '%M'))
View(df.clean)
View(df.base)
df.base <- df.clean
df.base <- df.clean
# Get y
regress.df <- df.clean %>% select(cost)
# Add ship_year and ship_month
df.base$ship_year <- as.numeric(format(as.Date(df.clean$ship_time), '%Y'))
df.base$ship_month <- as.numeric(format(as.Date(df.clean$ship_time), '%M'))
df.base$ship_month <- as.numeric(format(as.Date(df.clean$ship_time), '%m'))
# Add long-term fixed effect
regress.df$trend <- (df.base$ship_year - 2016)*52 + df.base$ship_month
View(regress.df)
# Add month effect
regress.df$ship_month <- df.base$ship_month
# Add vsl_company
regress.df$vsl_company <- df.base$vsl_company
str(regress.df)
remove(list = ls())
library(ggplot2)
setwd("/Users/hengzhang/Dropbox/My Projects/Xinfeng Private/TrawindShippingCostForecast")
load("clean_data_nov172018.RData")
df.base <- df.clean
# Get y
regress.df <- df.clean %>% select(cost)
# Add ship_year and ship_month
df.base$ship_year <- as.numeric(format(as.Date(df.clean$ship_time), '%Y'))
df.base$ship_month <- as.numeric(format(as.Date(df.clean$ship_time), '%m'))
# Add long-term fixed effect
regress.df$trend <- (df.base$ship_year - 2016)*52 + df.base$ship_month
# Add month effect, vsl_company, total_weight
regress.df$ship_month <- df.base$ship_month
regress.df$vsl_company <- df.base$vsl_company
regress.df$total_weight <- df.base$total_weight
regress.df$vsl_type <- df.base$vsl_type
str(regress.df)
# Sanity check
tmp <- regress.df %>% select(-1)
tmp2 <- unique(tmp)
# Divide by training and testing
index_train <- 1:409
index_test <- 410:531
regress.train <- regress.df[1:409,]
regress.test <- regress.df[410:531,]
model1 <- lm(cost ~., data = regress.train)
summary(model1)
unique(regress.train$vsl_company)
unique(regress.test$vsl_company)
# Add month effect, vsl_company, total_weight
regress.df$ship_month <- df.base$ship_month
regress.df$port <- df.base$vsl_port
regress.df$total_weight <- df.base$total_weight
regress.df$vsl_type <- df.base$vsl_type
# Divide by training and testing
regress.train <- regress.df[1:409,]
regress.test <- regress.df[410:531,]
model1 <- lm(cost ~., data = regress.train)
summary(model1)
df.base <- df.clean
# Get y
regress.df <- df.clean %>% select(cost)
# Add ship_year and ship_month
df.base$ship_year <- as.numeric(format(as.Date(df.clean$ship_time), '%Y'))
df.base$ship_month <- as.numeric(format(as.Date(df.clean$ship_time), '%m'))
# Add long-term fixed effect
regress.df$trend <- (df.base$ship_year - 2016)*52 + df.base$ship_month
# Add month effect, vsl_company, total_weight
regress.df$ship_month <- df.base$ship_month
regress.df$port <- df.base$vsl_port
regress.df$total_weight <- df.base$total_weight
regress.df$vsl_type <- df.base$vsl_type
# Divide by training and testing
regress.train <- regress.df[1:409,]
regress.test <- regress.df[410:531,]
model1 <- lm(cost ~., data = regress.train)
summary(model1)
df.base <- df.clean
# Get y
regress.df <- df.clean %>% select(cost)
# Add ship_year and ship_month
df.base$ship_year <- as.numeric(format(as.Date(df.clean$ship_time), '%Y'))
df.base$ship_month <- as.numeric(format(as.Date(df.clean$ship_time), '%m'))
# Add long-term fixed effect
regress.df$trend <- (df.base$ship_year - 2016)*52 + df.base$ship_month
# Add month effect, vsl_company, total_weight
regress.df$ship_month <- df.base$ship_month
regress.df$port <- df.base$port
regress.df$total_weight <- df.base$total_weight
regress.df$vsl_type <- df.base$vsl_type
# Divide by training and testing
regress.train <- regress.df[1:409,]
regress.test <- regress.df[410:531,]
model1 <- lm(cost ~., data = regress.train)
summary(model1)
df.base <- df.clean
# Get y
regress.df <- df.clean %>% select(cost)
# Add ship_year and ship_month
df.base$ship_year <- as.numeric(format(as.Date(df.clean$ship_time), '%Y'))
df.base$ship_month <- as.factor(as.numeric(format(as.Date(df.clean$ship_time), '%m')))
# Add long-term fixed effect
regress.df$trend <- (df.base$ship_year - 2016)*52 + df.base$ship_month
# Add month effect, vsl_company, total_weight
regress.df$ship_month <- df.base$ship_month
regress.df$port <- df.base$port
regress.df$total_weight <- df.base$total_weight
regress.df$vsl_type <- df.base$vsl_type
# Divide by training and testing
regress.train <- regress.df[1:409,]
regress.test <- regress.df[410:531,]
model1 <- lm(cost ~., data = regress.train)
summary(model1)
df.base <- df.clean
# Get y
regress.df <- df.clean %>% select(cost)
# Add ship_year and ship_month
df.base$ship_year <- as.numeric(format(as.Date(df.clean$ship_time), '%Y'))
df.base$ship_month <- as.numeric(format(as.Date(df.clean$ship_time), '%m'))
# Add long-term fixed effect
regress.df$trend <- (df.base$ship_year - 2016)*52 + df.base$ship_month
# Add month effect, vsl_company, total_weight
regress.df$ship_month <- as.factor(df.base$ship_month)
regress.df$port <- df.base$port
regress.df$total_weight <- df.base$total_weight
regress.df$vsl_type <- df.base$vsl_type
# Divide by training and testing
regress.train <- regress.df[1:409,]
regress.test <- regress.df[410:531,]
model1 <- lm(cost ~., data = regress.train)
summary(model1)
model1
model1$residuals
train_residuals <- model1$residuals
train_residuals <- as.dataframe(model1$residuals)
train_residuals <- data.frame(model1$residuals)
View(train_residuals)
train_residuals
# Summaize the result
tmp <- c(mean(abs(model1$residuals)), mean(abs(model1$residuals)/regress.df$cost))
)
# Summaize the result
tmp <- c(mean(abs(model1$residuals)))
# Summaize the result
tmp <- c(mean(abs(model1$residuals)), , mean(abs(model1$residuals)/regress.df$cost))  )
# Summaize the result
tmp <- c(mean(abs(model1$residuals)), , mean(abs(model1$residuals)/regress.df$cost)  )
# Summaize the result
tmp <- c(mean(abs(model1$residuals)), mean(abs(model1$residuals)/regress.df$cost)  )
# Summaize the result
tmp <- c(mean(abs(model1$residuals)), mean(abs(model1$residuals)/regress.df$cost))  )
# Summaize the result
tmp <- c(mean(abs(model1$residuals)), mean(abs(model1$residuals)/regress.df$cost)  )
# Summaize the result
tmp <- c(mean(abs(model1$residuals)), mean(abs(model1$residuals)/regress.train$cost)  )
tmp
# Summaize the result
tmp <- c(mean(abs(model1$residuals)), mean(abs(model1$residuals)/regress.train$cost), model1$r.squared )
tmp
# Summaize the result
tmp <- c(mean(abs(model1$residuals)), mean(abs(model1$residuals)/regress.train$cost), summary(model1)$r.squared )
tmp
sqr(3)
sqre(3)
squre(3)
# Summaize the result
tmp <- c(mean(abs(model1$residuals)), mean(abs(model1$residuals)/regress.train$cost), summary(model1)$r.squared, mean((model1$residuals)^2))
# Summaize the result
tmp <- c(mean(abs(model1$residuals)), mean(abs(model1$residuals)/regress.train$cost),
summary(model1)$r.squared, mean((model1$residuals)^2))
tmp
(model1$residuals)^2
tmo
tmo
tmp
?predict
# Prediction
tmp2 <- predict(model1, regress.test)
df.base %>% group_by(port) %>% count(port_type_value)
# Prediction
regress.test$port[regress.test$port == 'JiaoJiang'] = 'JiaoJiangSSZD'
tmp2 <- predict(model1, regress.test)
tmp2
compare <- data.frame(true = regress.test$cost, pred = tmp2)
View(compare)
compare <- data.frame(true = regress.test$cost, pred = predict(model1, regress.test))
result_test_raw$error <- result_test_raw$true - result_test_raw$pred
result_test_raw <- data.frame(true = regress.test$cost, pred = predict(model1, regress.test))
result_test_raw$error <- result_test_raw$true - result_test_raw$pred
View(result_test_raw)
tmp2 <- c(mean(abs(result_test_raw$error)))
tmp2
tmp2 <- c(mean(abs(result_test_raw$error)), mean(abs(result_test_raw$error)/result_test_raw$true))
tmp2
tmp
tmp2 <- c(mean(abs(result_test_raw$error)), mean(abs(result_test_raw$error)/result_test_raw$true),
NA,  mean((result_test_raw$error)^2))
summary_result_model1 <- data.frame(train = tmp, test = tmp2)
View(summary_result_model1)
# Summaize the result
tmp <- c(mean(abs(model1$residuals)), mean(abs(model1$residuals)/regress.train$cost),summary(model1)$r.squared)
tmp2 <- c(mean(abs(result_test_raw$error)), mean(abs(result_test_raw$error)/result_test_raw$true),
NA,  mean((result_test_raw$error)^2))
summary_result_model1 <- data.frame(train = tmp, test = tmp2)
rownames(summary_result_model1) <- c("APE", "MAPE", "R-Squared")
tmp2 <- c(mean(abs(result_test_raw$error)), mean(abs(result_test_raw$error)/result_test_raw$true),
NA)
summary_result_model1 <- data.frame(train = tmp, test = tmp2)
rownames(summary_result_model1) <- c("APE", "MAPE", "R-Squared")
View(summary_result_model1)
regress.tmp$port[regress.tmp$port == 'JiaoJiang'] = 'JiaoJiangSSZD'
# Plot the prediction and true values
regress.tmp <- regress.df
regress.tmp$port[regress.tmp$port == 'JiaoJiang'] = 'JiaoJiangSSZD'
result_test_raw <- data.frame(true = regress.tmp$cost, pred = predict(model1, regress.tmp))
result_tmp <- data.frame(true = regress.tmp$cost, pred = predict(model1, regress.tmp))
View(result_tmp)
?melt
install.packages(reshape2)
install.packages("reshape2")
library(reshape2)
?melt
plot.df <- melt(result_tmp)
View(plot.df)
result_tmp <- data.frame(true = regress.tmp$cost, pred = predict(model1, regress.tmp), ship_time = df.base$ship_time)
plot.df <- melt(result_tmp, id.vars = ship_time)
result_tmp <- data.frame(true = regress.tmp$cost, pred = predict(model1, regress.tmp), ship_time = df.base$ship_time)
plot.df <- melt(result_tmp, id.vars = ship_time)
result_tmp <- data.frame(true = regress.tmp$cost, pred = predict(model1, regress.tmp), ship_time = df.base$ship_time)
plot.df <- melt(result_tmp, id.vars = "ship_time")
p <- ggplot(plot.df, aes(x = ship_time, y = value, group = variable, color = variable)) + geom_line() + geom_point()
p
p <- ggplot(plot.df, aes(x = ship_time, y = value, group = variable, color = variable)) + geom_line() + geom_point() +
geom_vline(xintercept = df.base$bid_time[410])
p
View(summary_result_model1)
unco
mean(abs(df.base$income - df.base$cost))
mean(abs(df.base$income[409:531] - df.base$cost[409:531]))
