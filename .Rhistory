mape_list <- c(mape_list, mape)
}
mean(mape_list)
mean(r_square_list)
mape_list <- c()
r_square_list <- c()
for (bid in unique(regress.df$bid_time)){
train.df <- filter(regress.df, bid_time != bid)
test.df <- filter(regress.df, bid_time == bid)
#model <- lm(cost ~ trend + ship_month_factor + vsl_type + port + total_weight, data = train.df)
model <- lm(adjusted_cost ~ trend + ship_month + ship_month_square + vsl_type + port + total_weight, data = train.df)
result_test_raw <- data.frame(true = test.df$cost, pred = predict(model, test.df))
result_test_raw$error <- result_test_raw$true - result_test_raw$pred
r_square <- summary(model)$r.squared
r_square_list <- c(r_square_list, r_square)
mape <- mean(abs(result_test_raw$error) / result_test_raw$true)
mape_list <- c(mape_list, mape)
}
mean(mape_list)
mean(r_square_list)
mape_list <- c()
r_square_list <- c()
mae_list <- c()
for (bid in unique(regress.df$bid_time)){
train.df <- filter(regress.df, bid_time != bid)
test.df <- filter(regress.df, bid_time == bid)
model <- lm(cost ~ trend + ship_month_factor + vsl_type + port + total_weight, data = train.df)
#model <- lm(adjusted_cost ~ trend + ship_month + ship_month_square + vsl_type + port + total_weight, data = train.df)
result_test_raw <- data.frame(true = test.df$cost, pred = predict(model, test.df))
result_test_raw$error <- result_test_raw$true - result_test_raw$pred
r_square <- summary(model)$r.squared
r_square_list <- c(r_square_list, r_square)
mae <- mean(abs(result_test_raw$error))
mae_list <-c(mae_list, mae)
mape <- mean(abs(result_test_raw$error) / result_test_raw$true)
mape_list <- c(mape_list, mape)
}
mean(mape_list)
mean(r_square_list)
mean(mae_list)
mape_list <- c()
r_square_list <- c()
mae_list <- c()
for (bid in unique(regress.df$bid_time)){
train.df <- filter(regress.df, bid_time != bid)
test.df <- filter(regress.df, bid_time == bid)
#model <- lm(cost ~ trend + ship_month_factor + vsl_type + port + total_weight, data = train.df)
model <- lm(adjusted_cost ~ trend + ship_month + ship_month_square + vsl_type + port + total_weight, data = train.df)
result_test_raw <- data.frame(true = test.df$cost, pred = predict(model, test.df))
result_test_raw$error <- result_test_raw$true - result_test_raw$pred
r_square <- summary(model)$r.squared
r_square_list <- c(r_square_list, r_square)
mae <- mean(abs(result_test_raw$error))
mae_list <-c(mae_list, mae)
mape <- mean(abs(result_test_raw$error) / result_test_raw$true)
mape_list <- c(mape_list, mape)
}
mean(mape_list)
mean(r_square_list)
mean(mae_list)
mape_list <- c()
r_square_list <- c()
mae_list <- c()
for (bid in unique(regress.df$bid_time)){
train.df <- filter(regress.df, bid_time != bid)
test.df <- filter(regress.df, bid_time == bid)
#model <- lm(cost ~ trend + ship_month_factor + vsl_type + port + total_weight, data = train.df)
model <- lm(cost ~ trend + ship_month + ship_month_square + vsl_type + port + total_weight, data = train.df)
result_test_raw <- data.frame(true = test.df$cost, pred = predict(model, test.df))
result_test_raw$error <- result_test_raw$true - result_test_raw$pred
r_square <- summary(model)$r.squared
r_square_list <- c(r_square_list, r_square)
mae <- mean(abs(result_test_raw$error))
mae_list <-c(mae_list, mae)
mape <- mean(abs(result_test_raw$error) / result_test_raw$true)
mape_list <- c(mape_list, mape)
}
mean(mape_list)
mean(r_square_list)
mean(mae_list)
x = c(1,2,3)
y <- c(4, 5, 6)
data.frame(x, y)
xy <- data.frame(x.T, y.T)
xy <- data.frame(x, y)
row.names(xy, c('var1', 'var2'))
rownames(xy, c('var1', 'var2'))
xy
rownames(xy) <- c('var1', 'var2')
x
y
data.frame(x',y')
data.frame(t(x),t(y))
data.frame(c(t(x),t(y)))
data.frame(x = x, y = y)
mape_list <- c()
r_square_list <- c()
mae_list <- c()
for (bid in unique(regress.df$bid_time)){
train.df <- filter(regress.df, bid_time != bid)
test.df <- filter(regress.df, bid_time == bid)
model <- lm(cost ~ trend + ship_month_factor + vsl_type + port + total_weight, data = train.df)
result_test_raw <- data.frame(true = test.df$cost, pred = predict(model, test.df))
result_test_raw$error <- result_test_raw$true - result_test_raw$pred
r_square <- summary(model)$r.squared
r_square_list <- c(r_square_list, r_square)
mae <- mean(abs(result_test_raw$error))
mae_list <-c(mae_list, mae)
mape <- mean(abs(result_test_raw$error) / result_test_raw$true)
mape_list <- c(mape_list, mape)
}
res_1 <- c(mean(r_square_list), mean(mae_list), mean(mape_list))
mape_list <- c()
r_square_list <- c()
mae_list <- c()
for (bid in unique(regress.df$bid_time)){
train.df <- filter(regress.df, bid_time != bid)
test.df <- filter(regress.df, bid_time == bid)
model <- lm(cost ~ trend + ship_month + ship_month_square + vsl_type + port + total_weight, data = train.df)
result_test_raw <- data.frame(true = test.df$cost, pred = predict(model, test.df))
result_test_raw$error <- result_test_raw$true - result_test_raw$pred
r_square <- summary(model)$r.squared
r_square_list <- c(r_square_list, r_square)
mae <- mean(abs(result_test_raw$error))
mae_list <-c(mae_list, mae)
mape <- mean(abs(result_test_raw$error) / result_test_raw$true)
mape_list <- c(mape_list, mape)
}
res_2 <- c(mean(r_square_list), mean(mae_list), mean(mape_list))
comparison <- data.frame(FactorModel = res_1, QuadModel = res_2)
rownames(comparison) <- c('Avg R Square', 'Avg Mae', 'Avg MAPE')
comparison
remove(list = ls())
# load librareis and data
library(ggplot2)
library(reshape2)
library(magrittr)
library(dplyr)
remove(list = ls())
load("clean_data_nov172018.RData")
df.base <- df.clean
# Get y, [Alf: this is equivalent to
regress.df <- df.clean %>% select(cost)
regress.df$adjusted_cost <- df.clean$cost - df.clean$port_price_diff
# Add ship_year and ship_month
df.base$ship_year <- as.numeric(format(as.Date(df.clean$ship_time), '%Y'))
df.base$ship_month <- as.numeric(format(as.Date(df.clean$ship_time), '%m'))
# Add long-term fixed effect
regress.df$trend <- (df.base$ship_year - 2016) * 12 + df.base$ship_month
# Add month effect, vsl_company, total_weight
regress.df$ship_year <- df.base$ship_year
regress.df$ship_month_factor <- as.factor(df.base$ship_month)
regress.df$ship_month_value <- df.base$ship_month
regress.df$port <- df.base$port
regress.df$total_weight <- df.base$total_weight
regress.df$vsl_type <- factor(df.base$vsl_type)
regress.df$contract_time <- df.base$contract_time
regress.df$total_weight <- df.base$total_weight
regress.df$bid_time <- df.base$bid_time
regress.df$ship_time <- df.base$ship_time
regress.df$log_adjusted_cost <- log(regress.df$adjusted_cost)
regress.df$ship_month_square <- regress.df$ship_month_value ^ 2
# plot something to visualize the data
remove(p1, p2, p3, df.base, df.clean)
# Pivot table
remove(pivot_table)
pt <- tbl_df(regress.df)
pivot_table <- pt %>% group_by(port, ship_time) %>% summarise(PortTotalWeight = sum(total_weight), NumShipment = n(), AverageCost = mean(adjusted_cost),
MinCost = min(adjusted_cost), MaxCost = max(adjusted_cost), StdCost = sd(adjusted_cost)) %>% arrange(ship_time)
pivot_table
p4 <- ggplot(data = pivot_table, mapping = aes(x = StdCost)) + geom_freqpoly(binwidth = 0.2)
p4
hist(pivot_table$StdCost)
pivot_table <- pt %>% group_by(port, ship_timeï¼Œvsl_type) %>% summarise(PortTotalWeight = sum(total_weight), NumShipment = n(), AverageCost = mean(adjusted_cost),
MinCost = min(adjusted_cost), MaxCost = max(adjusted_cost), StdCost = sd(adjusted_cost)) %>% arrange(ship_time)
pivot_table <- pt %>% group_by(port, ship_time, vsl_type) %>% summarise(PortTotalWeight = sum(total_weight), NumShipment = n(), AverageCost = mean(adjusted_cost),
MinCost = min(adjusted_cost), MaxCost = max(adjusted_cost), StdCost = sd(adjusted_cost)) %>% arrange(ship_time)
pivot_table
View(pivot_table)
temp_pt <- filter(pivot_table, NumShipment > 1)
pivot_table2 <- temp_pt %>% group_by(port, ship_time) %>% summarise(PortTotalWeight = sum(total_weight), NumShipment = n(), AverageCost = mean(adjusted_cost),
MinCost = min(adjusted_cost), MaxCost = max(adjusted_cost), StdCost = sd(adjusted_cost)) %>% arrange(ship_time)
temp_pt <- filter(pivot_table, NumShipment > 1)
View(temp_pt)
View(temp_pt)
temp_pt[74:82,]
filter(temp_pt, StdCost > 0)
filter(temp_pt, StdCost > 0) %>% arrange(StdCost)
filter(temp_pt, StdCost > 0) %>% arrange(desc(StdCost))
_t <- filter(temp_pt, StdCost > 0) %>% arrange(desc(StdCost))
tt <- filter(temp_pt, StdCost > 0) %>% arrange(desc(StdCost))
sum(tt$NumShipment)
26/531
pt <- tbl_df(regress.df)
pivot_table <- pt %>% group_by(port) %>% summarise(PortTotalWeight = sum(total_weight), NumShipment = n(), AverageCost = mean(adjusted_cost),
MinCost = min(adjusted_cost), MaxCost = max(adjusted_cost), StdCost = sd(adjusted_cost)) %>% arrange(ship_time)
pivot_table <- pt %>% group_by(port) %>% summarise(PortTotalWeight = sum(total_weight), NumShipment = n(), AverageCost = mean(adjusted_cost), MinCost = min(adjusted_cost), MaxCost = max(adjusted_cost), StdCost = sd(adjusted_cost)) %>% arrange(ship_time)
pivot_table <- pt %>% group_by(port) %>% summarise(PortTotalWeight = sum(total_weight), NumShipment = n(), AverageCost = mean(adjusted_cost), MinCost = min(adjusted_cost),
MaxCost = max(adjusted_cost), StdCost = sd(adjusted_cost)) %>% arrange(NumShipment)
pivot_table <- pt %>% group_by(port) %>% summarise(PortTotalWeight = sum(total_weight), NumShipment = n(), AverageCost = mean(adjusted_cost), MinCost = min(adjusted_cost),
MaxCost = max(adjusted_cost), StdCost = sd(adjusted_cost)) %>% arrange(PortTotalWeight)
pivot_table <- pt %>% group_by(port) %>% summarise(PortTotalWeight = sum(total_weight), NumShipment = n(), AverageCost = mean(adjusted_cost), MinCost = min(adjusted_cost),
MaxCost = max(adjusted_cost), StdCost = sd(adjusted_cost)) %>% arrange(desc(PortTotalWeight))
pivot_table
pivot_table <- pt %>% group_by(port, ship_time, vsl_type) %>% summarise(PortTotalWeight = sum(total_weight), NumShipment = n(), AverageCost = mean(cost),
MinCost = min(cost), MaxCost = max(cost), StdCost = sd(cost)) %>% arrange(ship_time)
temp_pt <- filter(pivot_table, NumShipment > 1, StdCost > 0) %>% arrange(desc(StdCost))
temp_pt
sum(temp_pt$NumShipment)
pivot_table <- pt %>% group_by(port) %>% summarise(PortTotalWeight = sum(total_weight), NumShipment = n(), AverageCost = mean(cost), MinCost = min(cost),
MaxCost = max(cost), StdCost = sd(cost)) %>% arrange(desc(PortTotalWeight))
pivot_table
pivot_table <- pt %>% group_by(vsl_type) %>% summarise(VslTotalWeight = sum(total_weight), NumShipment = n(), AverageCost = mean(adjusted_cost), MinCost = min(adjusted_cost),
MaxCost = max(adjusted_cost), StdCost = sd(adjusted_cost)) %>% arrange(desc(PortTotalWeight))
pivot_table <- pt %>% group_by(vsl_type) %>% summarise(VslTotalWeight = sum(total_weight), NumShipment = n(), AverageCost = mean(adjusted_cost), MinCost = min(adjusted_cost),
MaxCost = max(adjusted_cost), StdCost = sd(adjusted_cost)) %>% arrange(desc(VslTotalWeight))
pivot_table
pivot_table <- pt %>% group_by(vsl_type) %>% summarise(VslTotalWeight = sum(total_weight), NumShipment = n()) %>% arrange(desc(VslTotalWeight))
pivot_table
major_shipment_reg.df <- filter(regress.df, port %in% c('NingBoZhenHai', 'NingBoHaiZhao', 'NingBoJiangYong', 'JiaoJiangSSZD', 'NingBoHuaPu'),
vsl_type %in% c('0.5W', '1.3-1.5W', '1-1.25W'))
p3 <- ggplot(data = major_shipment_reg.df, mapping  = aes(x = ship_time, y = adjusted_cost)) + geom_point() +
facet_wrap(port ~ vsl_type) + geom_vline(xintercept = major_shipment_reg.df$bid_time, color = 'green', linetype = 2)
p3
major_shipment_reg.df <- filter(regress.df, port %in% c('NingBoZhenHai', 'NingBoHaiZhao', 'NingBoJiangYong', 'JiaoJiangSSZD', 'NingBoHuaPu'),
vsl_type %in% c('0.5W', '1.3-1.5W', '1-1.25W'))
p3 <- ggplot(data = major_shipment_reg.df, mapping  = aes(x = ship_time, y = adjusted_cost)) + geom_point() +
facet_wrap(port ~ vsl_type) + geom_vline(xintercept = major_shipment_reg.df$bid_time, color = 'green', linetype = 2)
p3
major_shipment_reg.df <- filter(regress.df, port %in% c('NingBoZhenHai', 'NingBoHaiZhao', 'NingBoJiangYong', 'JiaoJiangSSZD'),
vsl_type %in% c('0.5W', '1.3-1.5W', '1-1.25W'))
p3 <- ggplot(data = major_shipment_reg.df, mapping  = aes(x = ship_time, y = adjusted_cost)) + geom_point() +
facet_wrap(port ~ vsl_type) + geom_vline(xintercept = major_shipment_reg.df$bid_time, color = 'green', linetype = 2)
p3
major_shipment_reg.df <- filter(regress.df, port %in% c('NingBoZhenHai', 'NingBoHaiZhao', 'NingBoJiangYong', 'JiaoJiangSSZD'),
vsl_type %in% c('0.5W'))
p3 <- ggplot(data = major_shipment_reg.df, mapping  = aes(x = ship_time, y = adjusted_cost)) + geom_point() +
facet_wrap(port ~ vsl_type) + geom_vline(xintercept = major_shipment_reg.df$bid_time, color = 'green', linetype = 2)
p3
major_shipment_reg.df <- filter(regress.df, port %in% c('NingBoZhenHai', 'NingBoHaiZhao', 'NingBoJiangYong', 'JiaoJiangSSZD'),
vsl_type %in% c('0.5W', '1.3-1.5W', '1-1.25W'))
p3 <- ggplot(data = major_shipment_reg.df, mapping  = aes(x = ship_time, y = adjusted_cost)) + geom_point() +
facet_wrap(port ~ vsl_type) + geom_vline(xintercept = major_shipment_reg.df$bid_time, color = 'green', linetype = 2)
p3
remove(list = ls())
load("clean_data_nov172018.RData")
# Get y
regress.df <- df.clean %>% select(cost)
regress.df$adjusted_cost <- df.clean$cost - df.clean$port_price_diff
# Get regressor
regress.df$ship_year <- as.numeric(format(as.Date(df.clean$ship_time), '%Y'))
regress.df$ship_month <- as.numeric(format(as.Date(df.clean$ship_time), '%m'))
regress.df$ship_month_factor <- as.factor(regress.df$ship_month)
regress.df$ship_month_square <- regress.df$ship_month^2
regress.df$trend <- (regress.df$ship_year - 2016) * 12 + regress.df$ship_month
regress.df$port <- df.clean$port
regress.df$total_weight <- df.clean$total_weight
regress.df$vsl_type <- factor(df.clean$vsl_type)
regress.df$contract_time <- df.clean$contract_time
regress.df$bid_time <- df.clean$bid_time
regress.df$ship_time <- df.clean$ship_time
regress.df$port[regress.df$port == 'JiaoJiang'] = 'JiaoJiangSSZD'
# Only look at major ports and major vsl type
regress.df <- filter(regress.df, port %in% c('NingBoZhenHai', 'NingBoHaiZhao', 'NingBoJiangYong', 'JiaoJiangSSZD', 'NingBoHuaPu'),
vsl_type %in% c('0.5W', '1.3-1.5W', '1-1.25W'))
mape_list <- c()
r_square_list <- c()
mae_list <- c()
for (bid in unique(regress.df$bid_time)){
train.df <- filter(regress.df, bid_time != bid)
test.df <- filter(regress.df, bid_time == bid)
model <- lm(cost ~ trend + ship_month_factor + vsl_type + port + total_weight, data = train.df)
result_test_raw <- data.frame(true = test.df$cost, pred = predict(model, test.df))
result_test_raw$error <- result_test_raw$true - result_test_raw$pred
r_square <- summary(model)$r.squared
r_square_list <- c(r_square_list, r_square)
mae <- mean(abs(result_test_raw$error))
mae_list <-c(mae_list, mae)
mape <- mean(abs(result_test_raw$error) / result_test_raw$true)
mape_list <- c(mape_list, mape)
}
res_1 <- c(mean(r_square_list), mean(mae_list), mean(mape_list))
mape_list <- c()
r_square_list <- c()
mae_list <- c()
for (bid in unique(regress.df$bid_time)){
train.df <- filter(regress.df, bid_time != bid)
test.df <- filter(regress.df, bid_time == bid)
model <- lm(cost ~ trend + ship_month + ship_month_square + vsl_type + port + total_weight, data = train.df)
result_test_raw <- data.frame(true = test.df$cost, pred = predict(model, test.df))
result_test_raw$error <- result_test_raw$true - result_test_raw$pred
r_square <- summary(model)$r.squared
r_square_list <- c(r_square_list, r_square)
mae <- mean(abs(result_test_raw$error))
mae_list <-c(mae_list, mae)
mape <- mean(abs(result_test_raw$error) / result_test_raw$true)
mape_list <- c(mape_list, mape)
}
res_2 <- c(mean(r_square_list), mean(mae_list), mean(mape_list))
comparison <- data.frame(Model_1 = res_1, Model_2 = res_2)
rownames(comparison) <- c('Avg R Square', 'Avg Mae', 'Avg MAPE')
comparison
load("/Users/alf/Desktop/Trawind proj local/TrawindShippingCostForecast/Cleaned_Trawind_Data_Eng_V0.RData")
View(xinfeng_alf_cleaned_eng)
# load librareis and data
library(ggplot2)
library(reshape2)
library(magrittr)
library(dplyr)
remove(list = ls())
load("clean_data_nov172018.RData")
# Get y
regress.df <- df.clean %>% select(cost)
regress.df$adjusted_cost <- df.clean$cost - df.clean$port_price_diff
source('~/Desktop/Trawind proj local/TrawindShippingCostForecast/lm_selection_Alf.R', echo=TRUE)
View(regress.df)
regress.df.non2018 <- filter(regress.df, ship_year < 2018)
# ------------------------------------------------------------------------------------------------------------------------
# Maybe 2018 is a year with a change in policy. So leave the year 2018 out and do the same for two candidate models.
# Interested in the model statistics.
remove(list = ls())
load("clean_data_nov172018.RData")
# Get y
regress.df <- df.clean %>% select(cost)
regress.df$adjusted_cost <- df.clean$cost - df.clean$port_price_diff
# Get regressor
regress.df$ship_year <- as.numeric(format(as.Date(df.clean$ship_time), '%Y'))
regress.df$ship_month <- as.numeric(format(as.Date(df.clean$ship_time), '%m'))
regress.df$ship_month_factor <- as.factor(regress.df$ship_month)
regress.df$ship_month_square <- regress.df$ship_month^2
regress.df$trend <- (regress.df$ship_year - 2016) * 12 + regress.df$ship_month
regress.df$port <- df.clean$port
regress.df$total_weight <- df.clean$total_weight
regress.df$vsl_type <- factor(df.clean$vsl_type)
regress.df$contract_time <- df.clean$contract_time
regress.df$bid_time <- df.clean$bid_time
regress.df$ship_time <- df.clean$ship_time
regress.df$port[regress.df$port == 'JiaoJiang'] = 'JiaoJiangSSZD'
# ------------------------------------------------------------------------------------------------------------------------
# Only look at major ports and major vsl type
regress.df <- filter(regress.df, port %in% c('NingBoZhenHai', 'NingBoHaiZhao', 'NingBoJiangYong', 'JiaoJiangSSZD', 'NingBoHuaPu'),
vsl_type %in% c('0.5W', '1.3-1.5W', '1-1.25W'))
regress.df.non2018 <- filter(regress.df, ship_year < 2018)
mape_list <- c()
r_square_list <- c()
mae_list <- c()
for (bid in unique(regress.df.non2018$bid_time)){
train.df <- filter(regress.df.non2018, bid_time != bid)
test.df <- filter(regress.df.non2018, bid_time == bid)
model <- lm(cost ~ trend + ship_month_factor + vsl_type + port + total_weight, data = train.df)
result_test_raw <- data.frame(true = test.df$cost, pred = predict(model, test.df))
result_test_raw$error <- result_test_raw$true - result_test_raw$pred
r_square <- summary(model)$r.squared
r_square_list <- c(r_square_list, r_square)
mae <- mean(abs(result_test_raw$error))
mae_list <-c(mae_list, mae)
mape <- mean(abs(result_test_raw$error) / result_test_raw$true)
mape_list <- c(mape_list, mape)
}
res_1 <- c(mean(r_square_list), mean(mae_list), mean(mape_list))
mape_list <- c()
r_square_list <- c()
mape_list <- c()
r_square_list <- c()
mae_list <- c()
for (bid in unique(regress.df.non2018$bid_time)){
train.df <- filter(regress.df.non2018, bid_time != bid)
test.df <- filter(regress.df.non2018, bid_time == bid)
model <- lm(cost ~ trend + ship_month_factor + vsl_type + port + total_weight, data = train.df)
result_test_raw <- data.frame(true = test.df$cost, pred = predict(model, test.df))
result_test_raw$error <- result_test_raw$true - result_test_raw$pred
r_square <- summary(model)$r.squared
r_square_list <- c(r_square_list, r_square)
mae <- mean(abs(result_test_raw$error))
mae_list <-c(mae_list, mae)
mape <- mean(abs(result_test_raw$error) / result_test_raw$true)
mape_list <- c(mape_list, mape)
}
remove(list = ls())
load("clean_data_nov172018.RData")
# Get y
regress.df <- df.clean %>% select(cost)
regress.df$adjusted_cost <- df.clean$cost - df.clean$port_price_diff
# Get regressor
regress.df$ship_year <- as.numeric(format(as.Date(df.clean$ship_time), '%Y'))
regress.df$ship_month <- as.numeric(format(as.Date(df.clean$ship_time), '%m'))
regress.df$ship_month_factor <- as.factor(regress.df$ship_month)
regress.df$ship_month_square <- regress.df$ship_month^2
regress.df$trend <- (regress.df$ship_year - 2016) * 12 + regress.df$ship_month
regress.df$port <- df.clean$port
regress.df$total_weight <- df.clean$total_weight
regress.df$vsl_type <- factor(df.clean$vsl_type)
regress.df$contract_time <- df.clean$contract_time
regress.df$bid_time <- df.clean$bid_time
regress.df$ship_time <- df.clean$ship_time
regress.df$port[regress.df$port == 'JiaoJiang'] = 'JiaoJiangSSZD'
# ------------------------------------------------------------------------------------------------------------------------
# Only look at major ports and major vsl type
regress.df <- filter(regress.df, port %in% c('NingBoZhenHai', 'NingBoHaiZhao', 'NingBoJiangYong', 'JiaoJiangSSZD', 'NingBoHuaPu'),
vsl_type %in% c('0.5W', '1.3-1.5W', '1-1.25W'))
regress.df.non2018 <- filter(regress.df, ship_year < 2018)
mape_list <- c()
r_square_list <- c()
mae_list <- c()
for (bid in unique(regress.df.non2018$bid_time)){
train.df <- filter(regress.df.non2018, bid_time != bid)
test.df <- filter(regress.df.non2018, bid_time == bid)
model <- lm(cost ~ trend + ship_month + ship_month_square + vsl_type + port + total_weight, data = train.df)
result_test_raw <- data.frame(true = test.df$cost, pred = predict(model, test.df))
result_test_raw$error <- result_test_raw$true - result_test_raw$pred
r_square <- summary(model)$r.squared
r_square_list <- c(r_square_list, r_square)
mae <- mean(abs(result_test_raw$error))
mae_list <-c(mae_list, mae)
mape <- mean(abs(result_test_raw$error) / result_test_raw$true)
mape_list <- c(mape_list, mape)
}
res_2 <- c(mean(r_square_list), mean(mae_list), mean(mape_list))
res_2
remove(list = ls())
load("clean_data_nov172018.RData")
load("clean_data_nov172018.RData")
plot(cars)
plot(cars)
plot(cars)
ggplot(data = diamonds) +
geom_point(
mapping = aes(x = carat, y = price),
alpha = 1/100
)
remove(list = ls())
remove(list = ls())
p1 <- ggplot(data = diamonds) +
geom_point(
mapping = aes(x = carat, y = price),
alpha = 1/100
)
p1
ggplot(data = smaller) +
geom_hex(mapping = aes(x = carat, y = price))
ggplot(data = diamonds) +
geom_hex(mapping = aes(x = carat, y = price))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = x, y = y)) +
coord_cartesian(xlim = c(4, 11), ylim = c(4, 15))
library(ggplot2)
library(reshape2)
library(magrittr)
library(dplyr)
m1 <- lm(log(price) ~ log(carat), data = diamonds)
summary(m1)
m1 <- lm(log(price) ~ log(carat), data = diamonds)
summary(m1)
d1 <- diamonds
d2 <- diamonds %>% add_residuals(m1) %>% mutate(resid = exp(resid))
library(modelr)
m1 <- lm(log(price) ~ log(carat), data = diamonds)
summary(m1)
d1 <- diamonds
d2 <- diamonds %>% add_residuals(m1) %>% mutate(resid = exp(resid))
View(d1)
View(d2)
m1 <- lm(log(price) ~ log(carat), data = diamonds)
summary(m1)
d1 <- diamonds
d2 <- diamonds %>% add_residuals(m1)
m1 <- lm(log(price) ~ log(carat), data = diamonds)
summary(m1)
d1 <- diamonds
d2 <- diamonds %>% add_residuals(m1) %>% mutate(resid = exp(resid))
m1 <- lm(log(price) ~ log(carat), data = diamonds)
summary(m1)
d1 <- diamonds
d2 <- diamonds %>% add_residuals(m1) %>% mutate(resid = exp(resid))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = resid))
m1 <- lm(log(price) ~ log(carat), data = diamonds)
summary(m1)
d1 <- diamonds
d2 <- diamonds %>% add_residuals(m1) %>% mutate(resid = exp(resid))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = resid))
m1 <- lm(log(price) ~ log(carat), data = diamonds)
remove(list = ls())
m1 <- lm(log(price) ~ log(carat), data = diamonds)
summary(m1)
d1 <- diamonds
d2 <- diamonds %>% add_residuals(m1) %>% mutate(resid = exp(resid))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = resid))
ggplot(data = d2) +
geom_point(mapping = aes(x = carat, y = resid))
ggplot(data = d2) +
geom_point(mapping = aes(x = carat, y = resid, alpha = 1/10))
ggplot(data = d2) +
geom_point(mapping = aes(x = carat, y = resid, size = 0.5))
ggplot(data = d2) +
geom_point(mapping = aes(x = carat, y = resid, size = 0.1))
ggplot(data = d2) +
geom_point(mapping = aes(x = carat, y = resid,))
ggplot(data = d2) +
geom_point(mapping = aes(x = carat, y = resid))
?geom_point
ggplot(data = d2) +
geom_point(mapping = aes(x = carat, y = resid, size = 0.01))
ggplot(data = d2) +
geom_point(mapping = aes(x = carat, y = resid, alpha = 0.05))
ggplot(data = d2) +
geom_point(mapping = aes(x = carat, y = resid), size = 0.5)
ggplot(data = d2) +
#geom_point(mapping = aes(x = carat, y = resid), size = 0.5)
geom_boxplot(mapping = aes(x = carat, y = resid))
