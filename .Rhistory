x$Date <- as.Date(x$Date, "%Y/%m/%d")
ShenHai_Idx_2016 <- x
remove(x)
# Shenhai Idx 2017
x <- read_csv("2017_ShenhaiIndex_Shi.csv")
x <- rename(x, c("date" = "Date",
"北-张家港（2-4万吨）" = "N_ZhangJiaGang_2_4wt",
"北-常熟（4-5万吨）" = "N_ChangShu_4_5_wt",
"北-乍浦（2-3万吨）" = "N_ZhaPu_2_3_wt",
"北-上海闸港（1.6-1.8万吨）" = "N_ShanghaiZhaGang_16_18_kt",
"北-广州（6-7万吨）" = "N_GuangZhou_6_7_wt",
"综合指数" = "Shenhai_Idx"))
x$Date <- as.Date(x$Date, "%d/%m/%Y")
ShenHai_Idx_2017 <- x
remove(x)
# Shenhai Idx 2018
x <- read_csv("2018_ShenhaiIndex_Shi.csv")
x <- rename(x, c("日期" = "Date",
"北-张家港（2-3万吨）" = "N_ZhangJiaGang_2_4wt",
"北方-常熟（4-5万吨）" = "N_ChangShu_4_5_wt",
"北方-乍浦（2-3万吨）" = "N_ZhaPu_2_3_wt",
"北-上海闸港（1.6-1.8万吨）" = "N_ShanghaiZhaGang_16_18_kt",
"北方-广州（6-7万吨）" = "N_GuangZhou_6_7_wt",
"综合指数" = "Shenhai_Idx"))
x$Date <- as.Date(x$Date, "%Y/%m/%d")
ShenHai_Idx_2018 <- x
remove(x)
# Concatenate all years into a single file
x <- rbind(ShenHai_Idx_2016, ShenHai_Idx_2017, ShenHai_Idx_2018)
# Visualize all sub-price. It turns out they are pretty collinear
x$bm <- x$N_ZhangJiaGang_2_4wt
x$N_ChangShu_4_5_wt <- x$N_ChangShu_4_5_wt - mean(x$N_ChangShu_4_5_wt - x$bm, na.rm = TRUE)
x$N_ChangShu_4_5_wt <- x$N_ChangShu_4_5_wt - mean(x$N_ChangShu_4_5_wt - x$bm, na.rm = TRUE)
x$N_ZhaPu_2_3_wt <- x$N_ZhaPu_2_3_wt - mean(x$N_ZhaPu_2_3_wt - x$bm, na.rm = TRUE)
x$N_ShanghaiZhaGang_16_18_kt <- x$N_ShanghaiZhaGang_16_18_kt - mean(x$N_ShanghaiZhaGang_16_18_kt - x$bm, na.rm = TRUE)
x$N_GuangZhou_6_7_wt <- x$N_GuangZhou_6_7_wt - mean(x$N_GuangZhou_6_7_wt - x$bm, na.rm = TRUE)
ggplot(data = x, aes(x = Date)) +
geom_line(aes(y = N_ZhangJiaGang_2_4wt, color = "N_ZJG(2-4wt)")) +
geom_line(aes(y = N_ChangShu_4_5_wt, color = "N_CS(4-5wt)")) +
geom_line(aes(y = N_ZhaPu_2_3_wt, color = "N_ZP(2-3wt)")) +
geom_line(aes(y = N_ShanghaiZhaGang_16_18_kt, color = "N_SHZG(1.6-1.8wt))")) +
geom_line(aes(y = N_GuangZhou_6_7_wt, color = "N_GZ(6-7wt)")) +
geom_line(aes(y = Shenhai_Idx, color = "Shenhai_Idx")) +
ylab("Price")
r_square_list_2 <- c()
mae_list_2 <- c()
mape_list_2 <- c()
total_cost_list_2 <- c()
total_cost_perc_list_2 <- c()
bid_cycles <- unique(regress.df$bid_time)
for (bid in bid_cycles){
train.df <- filter(regress.df, bid_time != bid)
test.df <- filter(regress.df, bid_time == bid)
# ================== Change Model Here ============================================
model <- lm(cost ~ trend + ship_month + ship_month_square + vsl_type + port + ship_year +
Fuel180 +
N_ZhaPu_2_3_wt_month_fcst, data = train.df)
# =================================================================================
result_test_raw <- data.frame(true = test.df$cost, pred = predict(model, test.df),
wgt = test.df$total_weight)
result_test_raw$error <- result_test_raw$true - result_test_raw$pred
r_square <- summary(model)$r.squared
r_square_list_2 <- c(r_square_list_2, r_square)
mae <- mean(abs(result_test_raw$error))
mae_list_2 <-c(mae_list_2, mae)
mape <- mean(abs(result_test_raw$error) / result_test_raw$true)
mape_list_2 <- c(mape_list_2, mape)
actual_total_cost = sum(result_test_raw$true * result_test_raw$wgt)
pred_total_cost = sum(result_test_raw$pred * result_test_raw$wgt)
total_cost_err = (pred_total_cost - actual_total_cost)/10000
total_cost_err_perc = (pred_total_cost - actual_total_cost)/actual_total_cost
total_cost_list_2 <- c(total_cost_list_2, total_cost_err)
total_cost_perc_list_2 <- c(total_cost_perc_list_2, total_cost_err_perc)
}
res_2 <- c(mean(r_square_list_2), mean(mae_list_2), mean(mape_list_2),
mean(abs(total_cost_list_2)), mean(abs(total_cost_perc_list_2)))
temp2 <- data.frame(bid_cycles = bid_cycles, total_cost_error2 = total_cost_list_2,
total_cost_error_perc2 = total_cost_perc_list_2)
comparison <- merge(temp1, temp2, by = "bid_cycles")
g.top <- ggplot(data = comparison, aes(x = bid_cycles)) +
theme_bw() +
geom_line(aes(y = total_cost_error), color = "red", linetype = "dashed") +
geom_point(aes(y = total_cost_error), color = "red") +
geom_line(aes(y = total_cost_error2), color = "blue") +
geom_point(aes(y = total_cost_error2), color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
labs(title = "Forecast Error in Terms of Total Bid Cost (TBC)\nBenchmark Model (red) vs Idx Model (blue)", y = "TBC-AE (W RMB)")
g.bottom <- ggplot(data = comparison, aes(x = bid_cycles)) +
theme_bw() +
geom_line(aes(y = abs(total_cost_error_perc)), color = "red", linetype = "dashed") +
geom_point(aes(y = abs(total_cost_error_perc)), color = "red") +
geom_line(aes(y = abs(total_cost_error_perc2)), color = "blue") +
geom_point(aes(y = abs(total_cost_error_perc2)), color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
labs(y = "TBC-APE")
# grid.arrange(g.top, g.mid, g.bottom, nrow=3, heights = c(3,3,3))
# grid.arrange(g.top, g.mid, heights = c(3,3,3))
epsilon = 0.05
grid.arrange(g.top, g.bottom, heights = c(0.5 + epsilon, 0.5 - epsilon))
comparison2 <- data.frame(Benchmark = res_1, IdxModel = res_2)
rownames(comparison2) <- c('Avg R Square', 'Avg Mae', 'Avg MAPE', 'TBC-AE', 'TBC-APE')
comparison2
r_square_list_3 <- c()
mae_list_3 <- c()
mape_list_3 <- c()
total_cost_list_3 <- c()
total_cost_perc_list_3 <- c()
bid_cycles <- unique(regress.df$bid_time)
# ================== Change Model Here ============================================
predictors <- c("trend", "ship_month", "ship_month_square", "vsl_type",
"port", "ship_year", "Fuel180", "N_ZhaPu_2_3_wt_month_fcst")
# =================================================================================
lasso_columms <- c("cost", "bid_time", "total_weight", predictors)
lasso.df <- regress.df %>% select(lasso_columms)
for (bid in bid_cycles){
# First, select the best lasso parameter lambda using cv
train.df <- filter(lasso.df, bid_time != bid)
x.train <- model.matrix(cost ~., train.df)[, -1]
x.train <- x.train[, -c(1, 2)]
y.train <- as.matrix(train.df$cost)
m.lasso <- cv.glmnet(x.train, y.train)
lambda_opt <- m.lasso$lambda.min
lasso.best <- m.lasso$glmnet.fit
# Getting the R-square of the training set
y.fit <- predict(lasso.best, s = lambda_opt, newx = x.train)
sst <- sum((y.train - mean(y.train))^2)
sse <- sum((y.train - y.fit)^2)
r_square <- 1 - sse/sst
r_square_list_3 <- c(r_square_list_3, r_square)
# Get MAE and MAPE from test set
test.df <- filter(lasso.df, bid_time == bid)
x.test <- model.matrix(cost ~., test.df)[, -1]
x.test <- x.test[, -c(1, 2)]
y.test <- as.matrix(test.df$cost)
y.predict <- predict(lasso.best, s = lambda_opt, newx = x.test)
mae = mean(abs(y.test - y.predict))
mape = mean(abs((y.test - y.predict)/y.test))
mae_list_3 <- c(mae_list_3, mae)
mape_list_3 <- c(mape_list_3, mape)
# Calculate TBCE and TBCPE
actual_total_cost = sum(test.df$cost * test.df$total_weight)
pred_total_cost = sum(y.predict * test.df$total_weight)
total_cost_err = (pred_total_cost - actual_total_cost)/10000
total_cost_err_perc = (pred_total_cost - actual_total_cost)/actual_total_cost
total_cost_list_3 <- c(total_cost_list_3, total_cost_err)
total_cost_perc_list_3 <- c(total_cost_perc_list_3, total_cost_err_perc)
}
res_3 <- c(mean(r_square_list_3), mean(mae_list_3), mean(mape_list_3),
mean(abs(total_cost_list_3)), mean(abs(total_cost_perc_list_3)))
temp3 <- data.frame(bid_cycles = bid_cycles, total_cost_error3 = total_cost_list_3,
total_cost_error_perc3 = total_cost_perc_list_3)
comparison <- merge(temp1, temp2, by = "bid_cycles")
comparison <- merge(comparison, temp3, by = "bid_cycles")
g.top <- ggplot(data = comparison, aes(x = bid_cycles)) +
theme_bw() +
geom_line(aes(y = total_cost_error), color = "red", linetype = "dashed") +
geom_point(aes(y = total_cost_error), color = "red") +
geom_line(aes(y = total_cost_error2), color = "blue") +
geom_point(aes(y = total_cost_error2), color = "blue") +
geom_line(aes(y = total_cost_error3), color = "black") +
geom_point(aes(y = total_cost_error3), color = "black") +
geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
labs(title = "Forecast Error in Terms of Total Bid Cost (TBD)\nBenchmark Model (red) vs Competing Model (blue) vs LASSO (black)", y = "TBCE (W RMB)")
g.bottom <- ggplot(data = comparison, aes(x = bid_cycles)) +
theme_bw() +
geom_line(aes(y = abs(total_cost_error_perc)), color = "red", linetype = "dashed") +
geom_point(aes(y = abs(total_cost_error_perc)), color = "red") +
geom_line(aes(y = abs(total_cost_error_perc2)), color = "blue") +
geom_point(aes(y = abs(total_cost_error_perc2)), color = "blue") +
geom_line(aes(y = abs(total_cost_error_perc3)), color = "black") +
geom_point(aes(y = abs(total_cost_error_perc3)), color = "black") +
geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
labs(y = "TBCPE")
epsilon = 0.05
grid.arrange(g.top, g.bottom, heights = c(0.5 + epsilon, 0.5 - epsilon))
#
comparison3 <- data.frame(Benchmark = res_1, IdxModel = res_2, IdxModel_LASSO = res_3)
rownames(comparison3) <- c('Avg R Square', 'Avg Mae', 'Avg MAPE', 'Mean ATBCE', 'Mean ATBCPE')
comparison3
res_3
total_cost_perc_list_3
total_cost_perc_list_3[5]
total_cost_perc_list_3[6:]
total_cost_perc_list_3[6]
total_cost_perc_list_3[6,]
total_cost_perc_list_3[6:,]
total_cost_perc_list_3[6:end]
total_cost_perc_list_3[6:dim(total_cost_perc_list_3)]
total_cost_perc_list_3[6:dim(total_cost_perc_list_3),]
total_cost_perc_list_3
total_cost_perc_list_3[1:2]
total_cost_perc_list_3
total_cost_perc_list_3[6:12]
mean(abs(total_cost_perc_list_3[6:12]))
# 2017年开始的平均 TBC-APE， 模型为 Idx Model
mean(abs(total_cost_perc_list_3[6:12]))
comparison3
library(RJSONIO)
library(ggplot2)
library(grid)
library(gridExtra)
library(dplyr)
library(readxl)
library(readr)
library(reshape)
library(zoo)
library(glmnet)
load("regress_df.Rda")
regress.df <- filter(regress.df, port %in% c('NingBoZhenHai', 'NingBoHaiZhao', 'NingBoJiangYong', 'JiaoJiangSSZD', 'NingBoHuaPu'),vsl_type %in% c('0.5W', '1.3-1.5W', '1-1.25W'))
regress.df
r_square_list_1 <- c()
mae_list_1 <- c()
mape_list_1 <- c()
total_cost_list_1 <- c()
total_cost_perc_list_1 <- c()
bid_cycles <- unique(regress.df$bid_time)
for (bid in bid_cycles){
train.df <- filter(regress.df, bid_time != bid)
test.df <- filter(regress.df, bid_time == bid)
model <- lm(cost ~ trend + ship_month + ship_month_square + vsl_type + port, data = train.df)
result_test_raw <- data.frame(true = test.df$cost, pred = predict(model, test.df),
wgt = test.df$total_weight)
result_test_raw$error <- result_test_raw$true - result_test_raw$pred
r_square <- summary(model)$r.squared
r_square_list_1 <- c(r_square_list_1, r_square)
mae <- mean(abs(result_test_raw$error))
mae_list_1 <-c(mae_list_1, mae)
mape <- mean(abs(result_test_raw$error) / result_test_raw$true)
mape_list_1 <- c(mape_list_1, mape)
actual_total_cost = sum(result_test_raw$true * result_test_raw$wgt)
pred_total_cost = sum(result_test_raw$pred * result_test_raw$wgt)
total_cost_err = (pred_total_cost - actual_total_cost)/10000
total_cost_err_perc = (pred_total_cost - actual_total_cost)/actual_total_cost
total_cost_list_1 <- c(total_cost_list_1, total_cost_err)
total_cost_perc_list_1 <- c(total_cost_perc_list_1, total_cost_err_perc)
}
res_1 <- c(mean(r_square_list_1), mean(mae_list_1), mean(mape_list_1),
mean(abs(total_cost_list_1)), mean(abs(total_cost_perc_list_1)))
temp1 <- data.frame(bid_cycles = bid_cycles, total_cost_error = total_cost_list_1, total_cost_error_perc = total_cost_perc_list_1)
#
g.top <- ggplot(data = temp1, aes(x = bid_cycles, y = total_cost_error)) +
theme_bw() + geom_line(linetype = "dashed", color = "red") + geom_point(color = "red") +
geom_hline(yintercept = 0, linetype = "dotted", color = "grey") +
labs(x = "bid cycles", title = "Benchmark Model (red dotted)", y = "TBC-AE (W RMB)")
g.bottom<- ggplot(data = temp1, aes(x = bid_cycles, y = abs(total_cost_error_perc))) +
theme_bw() + geom_line(linetype = "dashed", color = "red") + geom_point(color = "red") +
geom_hline(yintercept = 0, linetype = "dotted", color = "grey") +
labs(x = "bid cycles", y = "TBC-APE")
epsilon = 0.05
grid.arrange(g.top, g.bottom, heights = c(1/2+epsilon, 1/2-epsilon))
res_1 <- data.frame(Benchmark_Model = res_1)
rownames(res_1) = c("R-square", "MAE", "MAPE", "TBC-AE", "TBC-APE")
res_1
CN <- read_excel("CN_Coastal_Bulk_Coal_Freight_Idx.xlsx")
SH <- read_excel("SHSPCBCF.xlsx")
CN <- rename(CN, c("China Coastal Bulk Coal Freight Index" = "CN_Coal_Idx"))
CN$Date <- as.Date(CN$Date, "%Y/%m/%d")
SH$Date <- as.Date(SH$Date, "%Y/%m/%d")
# c(min(SH$Date), max(SH$Date))
comparison = merge(x = CN, y = SH, by = "Date", all.y = TRUE)
ggplot(data = comparison, aes(x = Date)) +
geom_point(aes(y = CN_Coal_Idx, color = "CN")) +
geom_line(aes(y = SHSPCBCF, color = "SH")) +
ylab("Index Value")
# Shenhai Idx 2016
x <- read_excel("2016_ShenhaiIndex_Shi.xlsx")
x <- rename(x, c("date" = "Date",
"北-张家港（2-4万吨）" = "N_ZhangJiaGang_2_4wt",
"北-常熟（4-5万吨）" = "N_ChangShu_4_5_wt",
"北-乍浦（2-3万吨）" = "N_ZhaPu_2_3_wt",
"北-上海闸港（1.6-1.8万吨）" = "N_ShanghaiZhaGang_16_18_kt",
"北-广州（6-7万吨）" = "N_GuangZhou_6_7_wt",
"综合指数" = "Shenhai_Idx"))
x$Date <- as.Date(x$Date, "%Y/%m/%d")
ShenHai_Idx_2016 <- x
remove(x)
# Shenhai Idx 2017
x <- read_csv("2017_ShenhaiIndex_Shi.csv")
x <- rename(x, c("date" = "Date",
"北-张家港（2-4万吨）" = "N_ZhangJiaGang_2_4wt",
"北-常熟（4-5万吨）" = "N_ChangShu_4_5_wt",
"北-乍浦（2-3万吨）" = "N_ZhaPu_2_3_wt",
"北-上海闸港（1.6-1.8万吨）" = "N_ShanghaiZhaGang_16_18_kt",
"北-广州（6-7万吨）" = "N_GuangZhou_6_7_wt",
"综合指数" = "Shenhai_Idx"))
x$Date <- as.Date(x$Date, "%d/%m/%Y")
ShenHai_Idx_2017 <- x
remove(x)
# Shenhai Idx 2018
x <- read_csv("2018_ShenhaiIndex_Shi.csv")
x <- rename(x, c("日期" = "Date",
"北-张家港（2-3万吨）" = "N_ZhangJiaGang_2_4wt",
"北方-常熟（4-5万吨）" = "N_ChangShu_4_5_wt",
"北方-乍浦（2-3万吨）" = "N_ZhaPu_2_3_wt",
"北-上海闸港（1.6-1.8万吨）" = "N_ShanghaiZhaGang_16_18_kt",
"北方-广州（6-7万吨）" = "N_GuangZhou_6_7_wt",
"综合指数" = "Shenhai_Idx"))
x$Date <- as.Date(x$Date, "%Y/%m/%d")
ShenHai_Idx_2018 <- x
remove(x)
# Concatenate all years into a single file
x <- rbind(ShenHai_Idx_2016, ShenHai_Idx_2017, ShenHai_Idx_2018)
# Visualize all sub-price. It turns out they are pretty collinear
x$bm <- x$N_ZhangJiaGang_2_4wt
x$N_ChangShu_4_5_wt <- x$N_ChangShu_4_5_wt - mean(x$N_ChangShu_4_5_wt - x$bm, na.rm = TRUE)
x$N_ChangShu_4_5_wt <- x$N_ChangShu_4_5_wt - mean(x$N_ChangShu_4_5_wt - x$bm, na.rm = TRUE)
x$N_ZhaPu_2_3_wt <- x$N_ZhaPu_2_3_wt - mean(x$N_ZhaPu_2_3_wt - x$bm, na.rm = TRUE)
x$N_ShanghaiZhaGang_16_18_kt <- x$N_ShanghaiZhaGang_16_18_kt - mean(x$N_ShanghaiZhaGang_16_18_kt - x$bm, na.rm = TRUE)
x$N_GuangZhou_6_7_wt <- x$N_GuangZhou_6_7_wt - mean(x$N_GuangZhou_6_7_wt - x$bm, na.rm = TRUE)
ggplot(data = x, aes(x = Date)) +
geom_line(aes(y = N_ZhangJiaGang_2_4wt, color = "N_ZJG(2-4wt)")) +
geom_line(aes(y = N_ChangShu_4_5_wt, color = "N_CS(4-5wt)")) +
geom_line(aes(y = N_ZhaPu_2_3_wt, color = "N_ZP(2-3wt)")) +
geom_line(aes(y = N_ShanghaiZhaGang_16_18_kt, color = "N_SHZG(1.6-1.8wt))")) +
geom_line(aes(y = N_GuangZhou_6_7_wt, color = "N_GZ(6-7wt)")) +
geom_line(aes(y = Shenhai_Idx, color = "Shenhai_Idx")) +
ylab("Price")
r_square_list_2 <- c()
mae_list_2 <- c()
mape_list_2 <- c()
total_cost_list_2 <- c()
total_cost_perc_list_2 <- c()
bid_cycles <- unique(regress.df$bid_time)
for (bid in bid_cycles){
train.df <- filter(regress.df, bid_time != bid)
test.df <- filter(regress.df, bid_time == bid)
# ================== Change Model Here ============================================
model <- lm(cost ~ trend + ship_month + ship_month_square + vsl_type + port + ship_year +
Fuel180 +
N_ZhaPu_2_3_wt_month_fcst, data = train.df)
# =================================================================================
result_test_raw <- data.frame(true = test.df$cost, pred = predict(model, test.df),
wgt = test.df$total_weight)
result_test_raw$error <- result_test_raw$true - result_test_raw$pred
r_square <- summary(model)$r.squared
r_square_list_2 <- c(r_square_list_2, r_square)
mae <- mean(abs(result_test_raw$error))
mae_list_2 <-c(mae_list_2, mae)
mape <- mean(abs(result_test_raw$error) / result_test_raw$true)
mape_list_2 <- c(mape_list_2, mape)
actual_total_cost = sum(result_test_raw$true * result_test_raw$wgt)
pred_total_cost = sum(result_test_raw$pred * result_test_raw$wgt)
total_cost_err = (pred_total_cost - actual_total_cost)/10000
total_cost_err_perc = (pred_total_cost - actual_total_cost)/actual_total_cost
total_cost_list_2 <- c(total_cost_list_2, total_cost_err)
total_cost_perc_list_2 <- c(total_cost_perc_list_2, total_cost_err_perc)
}
res_2 <- c(mean(r_square_list_2), mean(mae_list_2), mean(mape_list_2),
mean(abs(total_cost_list_2)), mean(abs(total_cost_perc_list_2)))
temp2 <- data.frame(bid_cycles = bid_cycles, total_cost_error2 = total_cost_list_2,
total_cost_error_perc2 = total_cost_perc_list_2)
comparison <- merge(temp1, temp2, by = "bid_cycles")
g.top <- ggplot(data = comparison, aes(x = bid_cycles)) +
theme_bw() +
geom_line(aes(y = total_cost_error), color = "red", linetype = "dashed") +
geom_point(aes(y = total_cost_error), color = "red") +
geom_line(aes(y = total_cost_error2), color = "blue") +
geom_point(aes(y = total_cost_error2), color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
labs(title = "Forecast Error in Terms of Total Bid Cost (TBC)\nBenchmark Model (red) vs Idx Model (blue)", y = "TBC-AE (W RMB)")
g.bottom <- ggplot(data = comparison, aes(x = bid_cycles)) +
theme_bw() +
geom_line(aes(y = abs(total_cost_error_perc)), color = "red", linetype = "dashed") +
geom_point(aes(y = abs(total_cost_error_perc)), color = "red") +
geom_line(aes(y = abs(total_cost_error_perc2)), color = "blue") +
geom_point(aes(y = abs(total_cost_error_perc2)), color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
labs(y = "TBC-APE")
# grid.arrange(g.top, g.mid, g.bottom, nrow=3, heights = c(3,3,3))
# grid.arrange(g.top, g.mid, heights = c(3,3,3))
epsilon = 0.05
grid.arrange(g.top, g.bottom, heights = c(0.5 + epsilon, 0.5 - epsilon))
comparison2 <- data.frame(Benchmark = res_1, IdxModel = res_2)
rownames(comparison2) <- c('Avg R Square', 'Avg Mae', 'Avg MAPE', 'TBC-AE', 'TBC-APE')
r_square_list_2 <- c()
mae_list_2 <- c()
mape_list_2 <- c()
total_cost_list_2 <- c()
total_cost_perc_list_2 <- c()
bid_cycles <- unique(regress.df$bid_time)
for (bid in bid_cycles){
train.df <- filter(regress.df, bid_time != bid)
test.df <- filter(regress.df, bid_time == bid)
# ================== Change Model Here ============================================
model <- lm(cost ~ trend + ship_month + ship_month_square + vsl_type + port + ship_year +
Fuel180 +
N_ZhaPu_2_3_wt_month_fcst, data = train.df)
# =================================================================================
result_test_raw <- data.frame(true = test.df$cost, pred = predict(model, test.df),
wgt = test.df$total_weight)
result_test_raw$error <- result_test_raw$true - result_test_raw$pred
r_square <- summary(model)$r.squared
r_square_list_2 <- c(r_square_list_2, r_square)
mae <- mean(abs(result_test_raw$error))
mae_list_2 <-c(mae_list_2, mae)
mape <- mean(abs(result_test_raw$error) / result_test_raw$true)
mape_list_2 <- c(mape_list_2, mape)
actual_total_cost = sum(result_test_raw$true * result_test_raw$wgt)
pred_total_cost = sum(result_test_raw$pred * result_test_raw$wgt)
total_cost_err = (pred_total_cost - actual_total_cost)/10000
total_cost_err_perc = (pred_total_cost - actual_total_cost)/actual_total_cost
total_cost_list_2 <- c(total_cost_list_2, total_cost_err)
total_cost_perc_list_2 <- c(total_cost_perc_list_2, total_cost_err_perc)
}
res_2 <- c(mean(r_square_list_2), mean(mae_list_2), mean(mape_list_2),
mean(abs(total_cost_list_2)), mean(abs(total_cost_perc_list_2)))
temp2 <- data.frame(bid_cycles = bid_cycles, total_cost_error2 = total_cost_list_2,
total_cost_error_perc2 = total_cost_perc_list_2)
comparison <- merge(temp1, temp2, by = "bid_cycles")
g.top <- ggplot(data = comparison, aes(x = bid_cycles)) +
theme_bw() +
geom_line(aes(y = total_cost_error), color = "red", linetype = "dashed") +
geom_point(aes(y = total_cost_error), color = "red") +
geom_line(aes(y = total_cost_error2), color = "blue") +
geom_point(aes(y = total_cost_error2), color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
labs(title = "Forecast Error in Terms of Total Bid Cost (TBC)\nBenchmark Model (red) vs Idx Model (blue)", y = "TBC-AE (W RMB)")
g.bottom <- ggplot(data = comparison, aes(x = bid_cycles)) +
theme_bw() +
geom_line(aes(y = abs(total_cost_error_perc)), color = "red", linetype = "dashed") +
geom_point(aes(y = abs(total_cost_error_perc)), color = "red") +
geom_line(aes(y = abs(total_cost_error_perc2)), color = "blue") +
geom_point(aes(y = abs(total_cost_error_perc2)), color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
labs(y = "TBC-APE")
epsilon = 0.05
grid.arrange(g.top, g.bottom, heights = c(0.5 + epsilon, 0.5 - epsilon))
comparison2 <- data.frame(Benchmark = res_1, IdxModel = res_2)
rownames(comparison2) <- c('Avg R Square', 'Avg Mae', 'Avg MAPE', 'TBC-AE', 'TBC-APE')
comparison2
r_square_list_3 <- c()
mae_list_3 <- c()
mape_list_3 <- c()
total_cost_list_3 <- c()
total_cost_perc_list_3 <- c()
bid_cycles <- unique(regress.df$bid_time)
# ================== Change Model Here ============================================
predictors <- c("trend", "ship_month", "ship_month_square", "vsl_type",
"port", "ship_year", "Fuel180", "N_ZhaPu_2_3_wt_month_fcst")
# =================================================================================
lasso_columms <- c("cost", "bid_time", "total_weight", predictors)
lasso.df <- regress.df %>% select(lasso_columms)
for (bid in bid_cycles){
# First, select the best lasso parameter lambda using cv
train.df <- filter(lasso.df, bid_time != bid)
x.train <- model.matrix(cost ~., train.df)[, -1]
x.train <- x.train[, -c(1, 2)]
y.train <- as.matrix(train.df$cost)
m.lasso <- cv.glmnet(x.train, y.train)
lambda_opt <- m.lasso$lambda.min
lasso.best <- m.lasso$glmnet.fit
# Getting the R-square of the training set
y.fit <- predict(lasso.best, s = lambda_opt, newx = x.train)
sst <- sum((y.train - mean(y.train))^2)
sse <- sum((y.train - y.fit)^2)
r_square <- 1 - sse/sst
r_square_list_3 <- c(r_square_list_3, r_square)
# Get MAE and MAPE from test set
test.df <- filter(lasso.df, bid_time == bid)
x.test <- model.matrix(cost ~., test.df)[, -1]
x.test <- x.test[, -c(1, 2)]
y.test <- as.matrix(test.df$cost)
y.predict <- predict(lasso.best, s = lambda_opt, newx = x.test)
mae = mean(abs(y.test - y.predict))
mape = mean(abs((y.test - y.predict)/y.test))
mae_list_3 <- c(mae_list_3, mae)
mape_list_3 <- c(mape_list_3, mape)
# Calculate TBCE and TBCPE
actual_total_cost = sum(test.df$cost * test.df$total_weight)
pred_total_cost = sum(y.predict * test.df$total_weight)
total_cost_err = (pred_total_cost - actual_total_cost)/10000
total_cost_err_perc = (pred_total_cost - actual_total_cost)/actual_total_cost
total_cost_list_3 <- c(total_cost_list_3, total_cost_err)
total_cost_perc_list_3 <- c(total_cost_perc_list_3, total_cost_err_perc)
}
res_3 <- c(mean(r_square_list_3), mean(mae_list_3), mean(mape_list_3),
mean(abs(total_cost_list_3)), mean(abs(total_cost_perc_list_3)))
temp3 <- data.frame(bid_cycles = bid_cycles, total_cost_error3 = total_cost_list_3,
total_cost_error_perc3 = total_cost_perc_list_3)
comparison <- merge(temp1, temp2, by = "bid_cycles")
comparison <- merge(comparison, temp3, by = "bid_cycles")
g.top <- ggplot(data = comparison, aes(x = bid_cycles)) +
theme_bw() +
geom_line(aes(y = total_cost_error), color = "red", linetype = "dashed") +
geom_point(aes(y = total_cost_error), color = "red") +
geom_line(aes(y = total_cost_error2), color = "blue") +
geom_point(aes(y = total_cost_error2), color = "blue") +
geom_line(aes(y = total_cost_error3), color = "black") +
geom_point(aes(y = total_cost_error3), color = "black") +
geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
labs(title = "Forecast Error in Terms of Total Bid Cost (TBD)\nBenchmark Model (red) vs Competing Model (blue) vs LASSO (black)", y = "TBCE (W RMB)")
g.bottom <- ggplot(data = comparison, aes(x = bid_cycles)) +
theme_bw() +
geom_line(aes(y = abs(total_cost_error_perc)), color = "red", linetype = "dashed") +
geom_point(aes(y = abs(total_cost_error_perc)), color = "red") +
geom_line(aes(y = abs(total_cost_error_perc2)), color = "blue") +
geom_point(aes(y = abs(total_cost_error_perc2)), color = "blue") +
geom_line(aes(y = abs(total_cost_error_perc3)), color = "black") +
geom_point(aes(y = abs(total_cost_error_perc3)), color = "black") +
geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
labs(y = "TBCPE")
epsilon = 0.05
grid.arrange(g.top, g.bottom, heights = c(0.5 + epsilon, 0.5 - epsilon))
#
comparison3 <- data.frame(Benchmark = res_1, IdxModel = res_2, IdxModel_LASSO = res_3)
rownames(comparison3) <- c('Avg R Square', 'Avg Mae', 'Avg MAPE', 'Mean ATBCE', 'Mean ATBCPE')
comparison3
# 2017年开始的平均 TBC-APE， 模型为 Idx Model
mean(abs(total_cost_perc_list_3[6:12]))
View(regress.df)
load("~/Desktop/Trawind proj local/TrawindShippingCostForecast Alf/All data/cleaned_idx_data_v2/Fuel180_HK.Rda")
View(Fuel180)
